

1.选择目录,将这个目录变成GIT可以管理的仓库
  git init
2.连接远程仓库
  git remote add origin git@github.com:Hex-s/learngit.gi
3.克隆远程库
  git clone git@github.com:Hex-s/gitskills.git
4.创建、切换、删除 分支
  创建并切换git checkout -b dev  == git branch dev + git checkout dev  删除：git branch -d dev
5.提交修改到远程分支上
    1) git add filename
    2) git commit -m '提交信息'
       git push origin dev
6.当前分支与远程master同步
    1) git fetch origin master
    2) git merge origin/master -m '同步master'
    3) git push origin branch
    4) 分支合并到master上
  
7. git status 命令可以让我们时刻掌握仓库当前的状态
8. git diff 顾名思义就是查看difference
9. git log 历史记录,加上--pretty=oneline参数
10. 切换版本
    1）git reset --hard HEAD^ 上一个版本就是HEAD^，上上一个版本就是HEAD^^，上100个版本HEAD~100
    2）git reset --hard 3628164（commit id）
11. git reflog用来记录每一次命令,在9操作中切换到历史版本，也可以找到被隐藏的commit id
12. 工作区 git init 的目录
13. 版本库 工作区中隐藏的 .git 目录
      Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
      还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
14. 提交后，git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
15. git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
      1) 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
      2) 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
16. git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
17. git log --graph命令可以看到分支合并图
18. 分支上的代码更新到master上 git checkout master git merge --no-ff -m "merge info" dev
19. git stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
    查看储存的工作现场：git stash list --> stash@{0}: WIP on dev: 6224937 add merge
    1) git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
    2) git stash pop 1)中的集合
    3) 多次stash git stash apply stash@{0}
    
20. git remote --> origin 查看远程库的信息
    git remote -v 显示详细信息
      origin  git@github.com:michaelliao/learngit.git (fetch)
      origin  git@github.com:michaelliao/learngit.git (push)
21. 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；


      

